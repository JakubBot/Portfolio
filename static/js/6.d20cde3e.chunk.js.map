{"version":3,"sources":["components/projects/pixiImagesController.js"],"names":["window","PIXI","LiquidImagesController","this","DOM","image","options","bindTimelineToScroll","images","document","querySelectorAll","app","liquidImages","console","error","i","length","canvasWidth","clientWidth","canvasHeight","clientHeight","width","height","transparent","resolution","devicePixelRatio","resizeTo","appendChild","view","imageFile","getAttribute","from","name","anchor","set","position","x","y","stage","addChild","displacementMapFile","displacementMap","displacementFilter","DisplacementFilter","filterArea","screen","filters","displacementTimeline","gsap","timeline","paused","canvasElement","querySelector","add","fromTo","autoAlpha","duration","ease","scale","onComplete","ScrollScene","triggerElement","triggerHook","reverseSpeed"],"mappings":"iMAIAA,OAAOC,KAAOA,E,IAKOC,E,WACjB,aAAe,oBAKXC,KAAKC,IAAM,CACPC,MAAO,oBAGXF,KAAKG,QAAU,CACXC,sBAAsB,GAO1BJ,KAAKK,OAASC,SAASC,iBAAiBP,KAAKC,IAAIC,OAEjDF,KAAKQ,IAAM,K,mDAMS,OAAhBR,KAAKK,OACLL,KAAKS,eAELC,QAAQC,MAAR,UAAiBX,KAAKC,IAAIC,MAA1B,kC,qCAKJ,IAAK,IAAIU,EAAI,EAAGA,EAAIZ,KAAKK,OAAOQ,OAAQD,IAAK,CACzC,IAAME,EAAcd,KAAKK,OAAOO,GAAGG,YAC7BC,EAAehB,KAAKK,OAAOO,GAAGK,aAEpCjB,KAAKQ,IAAM,IAAIV,cAAiB,CAC5BoB,MAAOJ,EACPK,OAAQH,EACRI,aAAa,EACbC,WAAYxB,OAAOyB,iBACnBC,SAAUvB,KAAKK,OAAOO,KAG1BZ,KAAKK,OAAOO,GAAGY,YAAYxB,KAAKQ,IAAIiB,MAEpC,IAAMC,EAAY1B,KAAKK,OAAOO,GAAGe,aAAa,cACxCzB,EAAQJ,SAAY8B,KACtBF,GAGJxB,EAAM2B,KAAOH,EACbxB,EAAMgB,MAAQJ,EACdZ,EAAMiB,OAASH,EAEfd,EAAM4B,OAAOC,IAAI,IAEjB7B,EAAM8B,SAASC,EAAInB,EAAc,EACjCZ,EAAM8B,SAASE,EAAIlB,EAAe,EAElChB,KAAKQ,IAAI2B,MAAMC,SAASlC,GAExB,IAAMmC,EAAsBrC,KAAKK,OAAOO,GAAGe,aAAa,yBAClDW,EAAkBxC,SAAY8B,KAChCS,GAEEE,EAAqB,IAAIzC,UAAa0C,mBACxCF,GAGJtC,KAAKQ,IAAI2B,MAAMM,WAAazC,KAAKQ,IAAIkC,OACrC1C,KAAKQ,IAAI2B,MAAMQ,QAAU,CAACJ,GAC1BvC,KAAKQ,IAAI2B,MAAMC,SAASE,GAExBA,EAAgBT,KAAOQ,EACvBC,EAAgBpB,MAAQJ,EACxBwB,EAAgBnB,OAASH,EAEzBsB,EAAgBR,OAAOC,IAAI,IAE3BO,EAAgBN,SAASE,EAAIlB,EAAe,EAC5CsB,EAAgBN,SAASC,EAAInB,EAAc,EAE3C,IAAM8B,EAAuBC,IAAKC,SAAS,CACvCC,QAAQ,IAGNC,EAAgBhD,KAAKK,OAAOO,GAAGqC,cAAc,UA6CnD,GA3CAL,EACKM,IAAI,SACJC,OACGH,EACA,CACII,UAAW,GAEf,CACIC,SAAU,GACVD,UAAW,EACXE,KAAM,cAEV,SAEHH,OACGH,EACA,CACIO,MAAO,KAEX,CACIF,SAAU,EACVE,MAAO,EACPD,KAAM,cAEV,SAEHH,OACGZ,EAAmBgB,MACnB,CACItB,EAAG,IACHC,EAAG,KAEP,CACImB,SAAU,IACVpB,EAAG,EACHC,EAAG,EACHoB,KAAM,aACNE,WAAY,cAGhB,UAGiC,IAAtCxD,KAAKG,QAAQC,qBACQ,IAAIqD,IAAY,CAChCC,eAAgB1D,KAAKK,OAAOO,GAC5B+C,YAAa,EACbN,SAAU,OACVR,KAAM,CACFC,SAAUF,UAKE,IAAIa,IAAY,CAChCC,eAAgB1D,KAAKK,OAAOO,GAC5B+C,YAAa,GACbd,KAAM,CACFC,SAAUF,EACVgB,aAAc,U","file":"static/js/6.d20cde3e.chunk.js","sourcesContent":["import * as PIXI from \"pixi.js\";\nimport gsap from \"gsap\";\nimport {ScrollScene} from \"scrollscene\";\n\nwindow.PIXI = PIXI;\n\n/**\n * Liquid images reveal on scroll\n */\nexport default class LiquidImagesController {\n    constructor() {\n        /**\n         *\n         * @type {{imageContainer: string}}\n         */\n        this.DOM = {\n            image: \".js-liquid-image\",\n        };\n\n        this.options = {\n            bindTimelineToScroll: false,\n        };\n\n        /**\n         *\n         * @returns {NodeListOf<Element>}\n         */\n        this.images = document.querySelectorAll(this.DOM.image);\n\n        this.app = null;\n\n    }\n\n    init() {\n\n        if (this.images !== null) {\n            this.liquidImages();\n        } else {\n            console.error(`${this.DOM.image} does not exist in the DOM!`);\n        }\n    }\n\n    liquidImages() {\n        for (let i = 0; i < this.images.length; i++) {\n            const canvasWidth = this.images[i].clientWidth;\n            const canvasHeight = this.images[i].clientHeight;\n\n            this.app = new PIXI.Application({\n                width: canvasWidth,\n                height: canvasHeight,\n                transparent: true,\n                resolution: window.devicePixelRatio,\n                resizeTo: this.images[i],\n            });\n\n            this.images[i].appendChild(this.app.view);\n\n            const imageFile = this.images[i].getAttribute(\"data-image\");\n            const image = PIXI.Sprite.from(\n                imageFile,\n            );\n\n            image.name = imageFile;\n            image.width = canvasWidth;\n            image.height = canvasHeight;\n\n            image.anchor.set(0.5);\n\n            image.position.x = canvasWidth / 2;\n            image.position.y = canvasHeight / 2;\n\n            this.app.stage.addChild(image);\n\n            const displacementMapFile = this.images[i].getAttribute(\"data-displacement-map\");\n            const displacementMap = PIXI.Sprite.from(\n                displacementMapFile,\n            );\n            const displacementFilter = new PIXI.filters.DisplacementFilter(\n                displacementMap,\n            );\n\n            this.app.stage.filterArea = this.app.screen;\n            this.app.stage.filters = [displacementFilter];\n            this.app.stage.addChild(displacementMap);\n\n            displacementMap.name = displacementMapFile;\n            displacementMap.width = canvasWidth;\n            displacementMap.height = canvasHeight;\n\n            displacementMap.anchor.set(0.5);\n\n            displacementMap.position.y = canvasHeight / 2;\n            displacementMap.position.x = canvasWidth / 2;\n\n            const displacementTimeline = gsap.timeline({\n                paused: true,\n            });\n\n            const canvasElement = this.images[i].querySelector(\"canvas\");\n\n            displacementTimeline\n                .add(\"start\")\n                .fromTo(\n                    canvasElement,\n                    {\n                        autoAlpha: 0,\n                    },\n                    {\n                        duration: 0.4,\n                        autoAlpha: 1,\n                        ease: \"power3.out\",\n                    },\n                    \"start\",\n                )\n                .fromTo(\n                    canvasElement,\n                    {\n                        scale: 1.5,\n                    },\n                    {\n                        duration: 1,\n                        scale: 1,\n                        ease: \"power3.out\",\n                    },\n                    \"start\",\n                )\n                .fromTo(\n                    displacementFilter.scale,\n                    {\n                        x: 150,\n                        y: 150,\n                    },\n                    {\n                        duration: 1.6,\n                        x: 0,\n                        y: 0,\n                        ease: \"power3.out\",\n                        onComplete: () => {\n                        },\n                    },\n                    \"start\",\n                );\n\n            if(this.options.bindTimelineToScroll === true) {\n                const scrollScene = new ScrollScene({\n                    triggerElement: this.images[i],\n                    triggerHook: 1,\n                    duration: '100%',\n                    gsap: {\n                        timeline: displacementTimeline,\n                    },\n                });\n\n            } else {\n                const scrollScene = new ScrollScene({\n                    triggerElement: this.images[i],\n                    triggerHook: 0.8,\n                    gsap: {\n                        timeline: displacementTimeline,\n                        reverseSpeed: 2,\n                    },\n                });\n            }\n\n        }\n    }\n}\n"],"sourceRoot":""}