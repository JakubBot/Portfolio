{"version":3,"sources":["components/projects/pixiImagesController.js"],"names":["window","PIXI","LiquidImagesController","this","DOM","image","options","bindTimelineToScroll","images","document","querySelectorAll","app","liquidImages","console","error","i","length","canvasWidth","clientWidth","canvasHeight","clientHeight","width","height","transparent","resolution","devicePixelRatio","resizeTo","appendChild","view","imageFile","getAttribute","from","name","anchor","set","position","x","y","stage","addChild","displacementMapFile","displacementMap","displacementFilter","DisplacementFilter","filterArea","screen","filters","style","touchAction","displacementTimeline","gsap","timeline","paused","canvasElement","querySelector","add","fromTo","autoAlpha","duration","ease","scale","onComplete","ScrollScene","triggerElement","triggerHook","reverseSpeed"],"mappings":"iMAIAA,OAAOC,KAAOA,E,IAKOC,E,WACnB,aAAe,oBAKbC,KAAKC,IAAM,CACTC,MAAO,oBAGTF,KAAKG,QAAU,CACbC,sBAAsB,GAOxBJ,KAAKK,OAASC,SAASC,iBAAiBP,KAAKC,IAAIC,OAEjDF,KAAKQ,IAAM,K,mDAIS,OAAhBR,KAAKK,OACPL,KAAKS,eAELC,QAAQC,MAAR,UAAiBX,KAAKC,IAAIC,MAA1B,kC,qCAKF,IAAK,IAAIU,EAAI,EAAGA,EAAIZ,KAAKK,OAAOQ,OAAQD,IAAK,CAC3C,IAAME,EAAcd,KAAKK,OAAOO,GAAGG,YAC7BC,EAAehB,KAAKK,OAAOO,GAAGK,aAEpCjB,KAAKQ,IAAM,IAAIV,cAAiB,CAC9BoB,MAAOJ,EACPK,OAAQH,EACRI,aAAa,EACbC,WAAYxB,OAAOyB,iBACnBC,SAAUvB,KAAKK,OAAOO,KAGxBZ,KAAKK,OAAOO,GAAGY,YAAYxB,KAAKQ,IAAIiB,MAEpC,IAAMC,EAAY1B,KAAKK,OAAOO,GAAGe,aAAa,cACxCzB,EAAQJ,SAAY8B,KAAKF,GAE/BxB,EAAM2B,KAAOH,EACbxB,EAAMgB,MAAQJ,EACdZ,EAAMiB,OAASH,EAEfd,EAAM4B,OAAOC,IAAI,IAEjB7B,EAAM8B,SAASC,EAAInB,EAAc,EACjCZ,EAAM8B,SAASE,EAAIlB,EAAe,EAElChB,KAAKQ,IAAI2B,MAAMC,SAASlC,GAExB,IAAMmC,EAAsBrC,KAAKK,OAAOO,GAAGe,aACzC,yBAEIW,EAAkBxC,SAAY8B,KAAKS,GACnCE,EAAqB,IAAIzC,UAAa0C,mBAC1CF,GAGFtC,KAAKQ,IAAI2B,MAAMM,WAAazC,KAAKQ,IAAIkC,OACrC1C,KAAKQ,IAAI2B,MAAMQ,QAAU,CAACJ,GAC1BvC,KAAKQ,IAAI2B,MAAMC,SAASE,GAExBtC,KAAKQ,IAAIiB,KAAKmB,MAAMC,YAAc,QAClCP,EAAgBT,KAAOQ,EACvBC,EAAgBpB,MAAQJ,EACxBwB,EAAgBnB,OAASH,EAEzBsB,EAAgBR,OAAOC,IAAI,IAE3BO,EAAgBN,SAASE,EAAIlB,EAAe,EAC5CsB,EAAgBN,SAASC,EAAInB,EAAc,EAE3C,IAAMgC,EAAuBC,IAAKC,SAAS,CACzCC,QAAQ,IAGJC,EAAgBlD,KAAKK,OAAOO,GAAGuC,cAAc,UA4CnD,GA1CAL,EACGM,IAAI,SACJC,OACCH,EACA,CACEI,UAAW,GAEb,CACEC,SAAU,GACVD,UAAW,EACXE,KAAM,cAER,SAEDH,OACCH,EACA,CACEO,MAAO,KAET,CACEF,SAAU,EACVE,MAAO,EACPD,KAAM,cAER,SAEDH,OACCd,EAAmBkB,MACnB,CACExB,EAAG,IACHC,EAAG,KAEL,CACEqB,SAAU,IACVtB,EAAG,EACHC,EAAG,EACHsB,KAAM,aACNE,WAAY,cAEd,UAGsC,IAAtC1D,KAAKG,QAAQC,qBACK,IAAIuD,IAAY,CAClCC,eAAgB5D,KAAKK,OAAOO,GAC5BiD,YAAa,EACbN,SAAU,OACVR,KAAM,CACJC,SAAUF,UAIM,IAAIa,IAAY,CAClCC,eAAgB5D,KAAKK,OAAOO,GAC5BiD,YAAa,GACbd,KAAM,CACJC,SAAUF,EACVgB,aAAc,U","file":"static/js/6.5d43d5c6.chunk.js","sourcesContent":["import * as PIXI from 'pixi.js';\nimport gsap from 'gsap';\nimport { ScrollScene } from 'scrollscene';\n\nwindow.PIXI = PIXI;\n\n/**\n * Liquid images reveal on scroll\n */\nexport default class LiquidImagesController {\n  constructor() {\n    /**\n     *\n     * @type {{imageContainer: string}}\n     */\n    this.DOM = {\n      image: '.js-liquid-image',\n    };\n\n    this.options = {\n      bindTimelineToScroll: false,\n    };\n\n    /**\n     *\n     * @returns {NodeListOf<Element>}\n     */\n    this.images = document.querySelectorAll(this.DOM.image);\n\n    this.app = null;\n  }\n\n  init() {\n    if (this.images !== null) {\n      this.liquidImages();\n    } else {\n      console.error(`${this.DOM.image} does not exist in the DOM!`);\n    }\n  }\n\n  liquidImages() {\n    for (let i = 0; i < this.images.length; i++) {\n      const canvasWidth = this.images[i].clientWidth;\n      const canvasHeight = this.images[i].clientHeight;\n\n      this.app = new PIXI.Application({\n        width: canvasWidth,\n        height: canvasHeight,\n        transparent: true,\n        resolution: window.devicePixelRatio,\n        resizeTo: this.images[i],\n      });\n\n      this.images[i].appendChild(this.app.view);\n\n      const imageFile = this.images[i].getAttribute('data-image');\n      const image = PIXI.Sprite.from(imageFile);\n\n      image.name = imageFile;\n      image.width = canvasWidth;\n      image.height = canvasHeight;\n\n      image.anchor.set(0.5);\n\n      image.position.x = canvasWidth / 2;\n      image.position.y = canvasHeight / 2;\n\n      this.app.stage.addChild(image);\n\n      const displacementMapFile = this.images[i].getAttribute(\n        'data-displacement-map'\n      );\n      const displacementMap = PIXI.Sprite.from(displacementMapFile);\n      const displacementFilter = new PIXI.filters.DisplacementFilter(\n        displacementMap\n      );\n\n      this.app.stage.filterArea = this.app.screen;\n      this.app.stage.filters = [displacementFilter];\n      this.app.stage.addChild(displacementMap);\n      //\n      this.app.view.style.touchAction = 'pan-y';\n      displacementMap.name = displacementMapFile;\n      displacementMap.width = canvasWidth;\n      displacementMap.height = canvasHeight;\n\n      displacementMap.anchor.set(0.5);\n\n      displacementMap.position.y = canvasHeight / 2;\n      displacementMap.position.x = canvasWidth / 2;\n\n      const displacementTimeline = gsap.timeline({\n        paused: true,\n      });\n\n      const canvasElement = this.images[i].querySelector('canvas');\n\n      displacementTimeline\n        .add('start')\n        .fromTo(\n          canvasElement,\n          {\n            autoAlpha: 0,\n          },\n          {\n            duration: 0.4,\n            autoAlpha: 1,\n            ease: 'power3.out',\n          },\n          'start'\n        )\n        .fromTo(\n          canvasElement,\n          {\n            scale: 1.5,\n          },\n          {\n            duration: 1,\n            scale: 1,\n            ease: 'power3.out',\n          },\n          'start'\n        )\n        .fromTo(\n          displacementFilter.scale,\n          {\n            x: 150,\n            y: 150,\n          },\n          {\n            duration: 1.6,\n            x: 0,\n            y: 0,\n            ease: 'power3.out',\n            onComplete: () => {},\n          },\n          'start'\n        );\n\n      if (this.options.bindTimelineToScroll === true) {\n        const scrollScene = new ScrollScene({\n          triggerElement: this.images[i],\n          triggerHook: 1,\n          duration: '100%',\n          gsap: {\n            timeline: displacementTimeline,\n          },\n        });\n      } else {\n        const scrollScene = new ScrollScene({\n          triggerElement: this.images[i],\n          triggerHook: 0.8,\n          gsap: {\n            timeline: displacementTimeline,\n            reverseSpeed: 2,\n          },\n        });\n      }\n    }\n  }\n}\n"],"sourceRoot":""}